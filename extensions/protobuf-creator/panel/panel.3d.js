"use strict";const path=require("path"),fs=require("fs"),chokidar=require("chokidar"),{dialog:dialog}=require("electron").remote;function join(t){return path.join(__dirname,"../",t)}module.paths.push(join("node_modules"));const{pbjs:pbjs,pbts:pbts}=require("protobufjs/cli"),pkg=require(join("package.json")),Vue=require(join("libs/vue.min.js")),cachePath=join(".cache.3d.json");fs.existsSync(cachePath)||fs.writeFileSync(cachePath,JSON.stringify({optionCreate:!0,optionLimit:!0,optionVerify:!0,watchUpdate:!1,filter:"\\.proto$",fileName:"",input:null,output:null},null,4)),require("fix-path")();let vm,panel,running,watcher,cache=require(cachePath);async function openDir(t){const e=await Editor.Dialog.showOpenDialog({defaultPath:t,properties:["openDirectory"]});return Array.isArray(e)?e[0]:e.filePaths?e.filePaths[0]:null}function readProto(t,e,r){const o=fs.readdirSync(e);for(let i=0;i<o.length;i++){const n=path.join(e,o[i]);fs.statSync(path.join(e,o[i])).isDirectory()?readProto(t,n,r):t.test(n)&&r.push(n)}}function dbPath(t){return/^db/.test(t)?t:"db:/"+t.slice(Editor.Project.path.length).replace(/\\/g,"/")}function compileProto(t,e){return new Promise((r,o)=>{pbjs.main(["--force-number","-t","static","-r","creator","-w","commonjs"].concat(t),(t,i)=>{if(t)return o(t);writeFileToProject(e,i.replace(/\$protobuf/g,"protobuf").replace("protobuf.roots.creator = {}","protobuf.roots.creator = $util.global"),r)})})}function generateTsd(t){const e=t.replace(".js",".d.ts");return new Promise((r,o)=>{process.execPath="node",pbts.main(["-m",t],(t,i)=>{if(t)return o(t);writeFileToProject(e,`declare global {\n ${i} \n}\nexport {}`,r)})})}function copyProtojs(t){return new Promise((e,r)=>{const o=fs.readFileSync(join("node_modules/protobufjs/dist/minimal/protobuf.min.js"));writeFileToProject(`${t}/protobuf.min.js`,o,r=>{const o=fs.readFileSync(join("node_modules/protobufjs/index.d.ts"));writeFileToProject(`${t}/protobuf.d.ts`,o,t=>e(r))})})}async function writeFileToProject(t,e,r){const o=dbPath(t);let i;fs.existsSync(t)?(i=await Editor.Message.request("asset-db","query-uuid",o),await Editor.Message.request("asset-db","save-asset",i,e)):i=await Editor.Message.request("asset-db","create-asset",o,e),r(i)}Editor.T=Editor.I18n.t,Editor.warn=console.warn,Editor.log=console.log,Editor.error=console.error,Editor.Dialog.showOpenDialog=dialog.showOpenDialog,exports.style=fs.readFileSync(join("panel/panel.3d.css"),"utf8"),exports.template=fs.readFileSync(join("panel/panel.3d.html"),"utf8"),exports.$={root:"#root"},exports.close=function(){if(!vm)return;let t=!1;for(const e in cache)Object.hasOwnProperty.call(vm.$data,e)&&(cache[e]=vm.$data[e],t=!0);t&&fs.writeFileSync(cachePath,JSON.stringify(cache,null,4))},exports.ready=function(){vm=new Vue({el:(panel=this).$.root,data:{input:cache.input||"",output:cache.output||path.join(Editor.Project.path,"assets"),fileName:cache.fileName||path.basename(Editor.Project.path),optionCreate:cache.optionCreate,optionLimit:cache.optionLimit,optionVerify:cache.optionVerify,watchUpdate:cache.watchUpdate,filter:cache.filter||"\\.proto$"},created:function(){this.$nextTick(()=>{for(const t in vm.$data)Object.hasOwnProperty.call(vm.$refs,t)&&(vm.$refs[t].value=vm.$data[t])})},methods:{t:t=>Editor.T(`${pkg.name}.${t}`),async selectDirImport(){if(running)return Editor.warn(this.t("executeWarn"));const t=await openDir(path.join(Editor.Project.path,"assets"));if(!t)return Editor.warn(this.t("form.warnDirectory"));this.output=t,running=!0,copyProtojs(this.output).then(()=>Editor.log(this.t("executeSuccess"))).catch(t=>Editor.error(t)).finally(()=>running=!1)},async selectInputDir(){const t=await openDir(Editor.Project.path);if(!t)return Editor.warn(this.t("form.warnDirectory"));this.input=t},onChange(t){Object.hasOwnProperty.call(this,t)&&(this[t]=this.$refs[t].value)},onCheckbox(t){Object.hasOwnProperty.call(this,t)&&(this[t]=!this[t])},execute(){if(running)return Editor.warn(this.t("executeWarn"));if(""===this.output)return Editor.warn(this.t("form.warnOutput"));if(""===this.input||""===this.fileName||""===this.filter)return Editor.warn(this.t("form.warnInput"));let t=["--no-beautify"];this.optionCreate&&(t.push("--no-create"),t.push("--no-convert")),this.optionVerify&&t.push("--no-verify"),this.optionLimit&&t.push("--no-delimited");const e=new RegExp(this.filter);readProto(e,this.input,t);const r=path.join(this.output,`protobuf+${this.fileName}.js`);this.watchUpdate&&!watcher&&((watcher=chokidar.watch(this.input,{ignored:/\.proto{0}$/})).on("unlink",o=>{e.test(o)&&(Editor.log(this.t("deleteFile"),o),t.splice(t.indexOf(o),1),this._createFiles(t,r))}),watcher.on("change",o=>{e.test(o)&&(Editor.log(this.t("changeFile"),o),-1===t.indexOf(o)&&t.push(o),this._createFiles(t,r))})),this._createFiles(t,r)},_createFiles(t,e){if(running=!0,e=e.replace(/\+/g,""),!/\.proto$/.test(t[t.length-1]))return[e,e.replace(".js",".d.ts")].forEach(t=>{fs.unlinkSync(t)}),running=!1,Editor.warn(this.t("form.warnFilter"));compileProto(t,e).then(generateTsd(e)).then(()=>Editor.log(this.t("executeSuccess"))).catch(t=>Editor.error(t.message)).finally(()=>running=!1)}}})};