[1,["a53vNVpo9Lv4SUb71sjwra","bbTkuzE01P4akrCdoOrb1b@f9941","64uwlqHO5OIKoOxK8rfVxr","a2TfLHVFtICqe4AJ3fY2s8","7dj5uJT9FMn6OrOOx83tfK@f9941","f9GoCxb25PZpjoXeQgqiep@f9941","95g6Fh2fFHGbTJKvWBDr7n@f9941","293iD1CGlAiZVm73SFWklc@f9941","11BaLIudpL1Z+iiHG3WIea@f9941"],["targetInfo","node","root","asset","value","_spriteFrame","SrcCamera","data","_parent","SrcEffectAsset"],[["cc.Node",["_name","_layer","_objFlags","__editorExtras__","_prefab","_components","_parent","_children","_lpos"],-1,4,9,1,2,5],["cc.Widget",["_alignFlags","_left","_originalWidth","_originalHeight","_right","_bottom","_top","node","__prefab"],-4,1,4],["cc.Sprite",["_sizeMode","_type","node","__prefab","_spriteFrame","_color"],1,1,4,6,5],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedChildren"],2,1,9,9],["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_parent","_components","_prefab"],1,1,2,4],["cc.CompPrefabInfo",["fileId"],2],["c52adOJ75FHkJuJGj9YqhY5",["node","__prefab"],3,1,4],["cc.PrefabInfo",["fileId","instance","targetOverrides","root","asset","nestedPrefabInstanceRoots"],0,1,1,2],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.Layout",["_resizeMode","_layoutType","node","__prefab"],1,1,4],["cc.TargetInfo",["localID"],2],["06612d4W7FOqbv9nsjRzoew",["level","node","__prefab","SrcCamera","SrcEffectAsset"],2,1,4,1,6],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["cc.Camera",["_name","_projection","_orthoHeight","_near","_visibility","node","__prefab","_color"],-2,1,4,5],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[13,0,2],[16,0,1,2,3],[18,0,1,2,2],[20,0,1,2,3],[7,0,2],[17,0,1,2,2],[10,0,1,2,3,4,5,5],[3,0,1,2,1],[0,2,3,6,4,3],[11,0,1,2,3,4,5,4],[4,0,1,2,2],[19,0,1,2,2],[0,0,2,1,6,7,5,4,8,4],[0,0,1,6,5,4,3],[1,0,7,8,2],[5,0,2],[0,0,1,7,5,4,3],[0,0,2,1,7,5,4,4],[0,0,1,6,7,5,4,3],[0,0,2,1,6,5,4,4],[0,0,2,1,6,5,4,8,4],[0,0,1,6,5,4,8,3],[6,0,1,2,3,4,3],[3,0,1,1],[1,0,1,4,5,2,3,7,8,7],[1,0,1,6,7,8,4],[1,0,2,3,7,8,4],[8,0,1,1],[9,0,1,2,3,4,5,4],[12,0,1,2,3,3],[14,0,1,2,3,4,2],[2,0,2,3,5,4,2],[2,1,0,2,3,4,3],[2,2,3,4,1],[4,0,1,3,2,2],[15,0,1,1],[21,0,1,2,2],[22,0,1,2,3,4,5,6,7,6],[23,0,1,2,4]],[[[[15,"MatchTableView"],[16,"MatchTableView",262144,[-9,-10,-11],[[7,-6,[4,"44nJ8TI4lOBawySijvwIdm"],[5,780,1688]],[24,17,340,340,794,100,100,-7,[4,"8a66Y3P19Bl4IV07AZWzDj"]],[27,-8,[4,"0bahKSeUVFxZtIwiHfj/W/"]]],[28,"cedjtwPdxGyKOPH3Ovcy+n",null,null,-5,0,[-1,-2,-3,-4]]],[12,"Node",512,262144,1,[-14,-15,-16,-17,-18,-19],[[7,-12,[4,"d2NrSSGE5N1bWSY35XY4R5"],[5,630,1688]],[14,8,-13,[4,"fa9l6l2i5JHp3aJI45KUro"]]],[6,"a2zPODXiFIf5yrRvXB0j5t",null,null,null,1,0],[1,-75,0,0]],[17,"ToggleContainer",512,262144,[-23,-24],[[7,-20,[4,"530nZJbKhMTJDLwkrLmtGh"],[5,280,72]],[25,9,4,4,-21,[4,"50242+PIhBmY6DfeBmSCgS"]],[29,1,1,-22,[4,"2eMvlS8kJAwodPmDXM+SMI"]]],[6,"a2768jYhVONLgUcwZevgME",null,null,null,1,0]],[0,["356G2DfwJKuoBXUMrD40Hj"]],[0,["356G2DfwJKuoBXUMrD40Hj"]],[18,"Node-002",262144,1,[-28],[[7,-25,[4,"16w7Lbb3VI/YsyaCENxMuB"],[5,780,1688]],[30,1,-27,[4,"f5zMcuR7tD2JKOBPMyccNV"],-26,0]],[6,"03jtYGHvJOpaDMw75chBDX",null,null,null,1,0]],[19,"Sprite",512,262144,2,[[7,-29,[4,"44IQxvSgtJ1JMPNtlzDsCs"],[5,630,1688]],[31,0,-30,[4,"37d0/0TiFPzo7/gmmOv3m0"],[4,4280690214],1],[26,45,40,36,-31,[4,"33T5DyfZ5EQJk1thEdUO6y"]]],[6,"f1XDYUDI9Deofr9Nj1Fxl4",null,null,null,1,0]],[12,"BGToggle",512,262144,2,[3],[[7,-32,[4,"73PEqtb5pEzJajswZRC9gq"],[5,288,80]],[32,1,0,-33,[4,"9892MS0+FLjbROMWmPNFPl"],6]],[6,"a5Whn/PjdKPLKhFT1FQLUD",null,null,null,1,0],[1,-141,724,0]],[8,512,{},2,[9,"356G2DfwJKuoBXUMrD40Hj",null,null,-41,[34,"381Ng8Z/pOIYs74Xa6EHq1",1,[[35,[0,["356G2DfwJKuoBXUMrD40Hj"]],[-40]]],[[1,"Btn-001",["_name"],5],[5,["_lpos"],5,[1,0,-555,0]],[5,["_lrot"],5,[3,0,0,0,1]],[5,["_euler"],5,[1,0,0,0]],[1,"",["_string"],-34],[2,["_contentSize"],[0,["b24hYURW9KpocNIHK8nkus"]],[5,0,50.4]],[1,false,["_active"],-35],[11,["_spriteFrame"],-36,11],[2,["_contentSize"],[0,["6bl478mYtDHqn5INKDzzGm"]],[5,160,68]],[1,1,["_sizeMode"],-37],[2,["_contentSize"],[0,["43wr23XBhGA5OB92hvM+N+"]],[5,160,68]],[1,1,["_cacheMode"],-38],[1,262144,["_layer"],5],[3,262144,["_layer"],[0,["2cPrEqipRJv5RPiHgd76Yr"]]],[1,262144,["_layer"],-39]]],9]],[13,"Node-001",262144,1,[[7,-42,[4,"e4CYyMJyJL94DgQn2CQ98N"],[5,780,1688]],[14,12,-43,[4,"8e1QTn0BtGlo+dU4RF4Dl8"]]],[6,"2chEpV0NJCC7kD4zflOazI",null,null,null,1,0]],[8,512,{},3,[9,"371FXY599ELYAbsEca+UKq",null,null,-63,[10,"45Uq7A+JVPo4VfO4QsnuZs",1,[[3,"ToggleBtn",["_name"],[0,["371FXY599ELYAbsEca+UKq"]]],[2,["_lpos"],[0,["371FXY599ELYAbsEca+UKq"]],[1,-70,0,0]],[2,["_lrot"],[0,["371FXY599ELYAbsEca+UKq"]],[3,0,0,0,1]],[5,["_euler"],-44,[1,0,0,0]],[5,["_contentSize"],-45,[5,140,72]],[2,["_contentSize"],[0,["64g+VzYlpNEq/88geT0Iy5"]],[5,140,72]],[2,["_contentSize"],[0,["372mg4IhNAj6a+Ya7H2VZf"]],[5,140,72]],[1,true,["_active"],-46],[3,"玩家",["_string"],[0,["04+83OAbROHLNqjJ+13TG0"]]],[2,["_contentSize"],[0,["194g63YoZAobsTLCNLmBu+"]],[5,56,63]],[2,["_color"],[0,["04+83OAbROHLNqjJ+13TG0"]],[4,4294967295]],[3,28,["_fontSize"],[0,["04+83OAbROHLNqjJ+13TG0"]]],[3,28,["_actualFontSize"],[0,["04+83OAbROHLNqjJ+13TG0"]]],[1,false,["_isBold"],-47],[1,false,["_active"],-48],[2,["_color"],[0,["69S+xHo7hPha7bZyvApu3H"]],[4,4294967295]],[3,28,["_fontSize"],[0,["69S+xHo7hPha7bZyvApu3H"]]],[2,["_contentSize"],[0,["e2RQgcSW9MLr16bpdsqz3a"]],[5,56,63]],[3,28,["_actualFontSize"],[0,["69S+xHo7hPha7bZyvApu3H"]]],[3,false,["_isBold"],[0,["69S+xHo7hPha7bZyvApu3H"]]],[1,"玩家",["_string"],-49],[3,0,["_left"],[0,["b4KTKbVAxAs7r2x0Fl0P/u"]]],[3,0,["_right"],[0,["b4KTKbVAxAs7r2x0Fl0P/u"]]],[5,["_anchorPoint"],-50,[0,0.5,0.5]],[5,["_lpos"],-51,[1,0,0,0]],[5,["_lpos"],-52,[1,0,0,0]],[5,["_color"],-53,[4,4294967295]],[11,["_spriteFrame"],-54,3],[2,["_contentSize"],[0,["b8Z6UJOCdKDY5dVMjeSXye"]],[5,140,72]],[2,["_contentSize"],[0,["80aevhB9JAZre1e7bhi/n3"]],[5,140,72]],[5,["_lpos"],-55,[1,0,0,0]],[1,1,["_cacheMode"],-56],[1,1,["_cacheMode"],-57],[1,262144,["_layer"],-58],[1,262144,["_layer"],-59],[1,262144,["_layer"],-60],[1,262144,["_layer"],-61],[3,262144,["_layer"],[0,["0ajU0uagdPxavuk0LJ09Tc"]]],[1,262144,["_layer"],-62],[3,262144,["_layer"],[0,["a7QfB6OP1MTIOAQnU75w8Q"]]]]],2]],[0,["04OWTNCmlOXqXTZ63FwmQI"]],[8,512,{},3,[9,"371FXY599ELYAbsEca+UKq",null,null,-82,[10,"410enzqUFPXZys/AxVyNAf",1,[[3,"ToggleBtn-001",["_name"],[0,["371FXY599ELYAbsEca+UKq"]]],[2,["_lpos"],[0,["371FXY599ELYAbsEca+UKq"]],[1,70,0,0]],[2,["_lrot"],[0,["371FXY599ELYAbsEca+UKq"]],[3,0,0,0,1]],[5,["_euler"],-64,[1,0,0,0]],[5,["_contentSize"],-65,[5,140,72]],[2,["_contentSize"],[0,["64g+VzYlpNEq/88geT0Iy5"]],[5,140,72]],[2,["_contentSize"],[0,["372mg4IhNAj6a+Ya7H2VZf"]],[5,140,72]],[1,true,["_active"],-66],[3,"牌桌",["_string"],[0,["04+83OAbROHLNqjJ+13TG0"]]],[2,["_contentSize"],[0,["194g63YoZAobsTLCNLmBu+"]],[5,56,63]],[2,["_color"],[0,["04+83OAbROHLNqjJ+13TG0"]],[4,4294967295]],[3,28,["_fontSize"],[0,["04+83OAbROHLNqjJ+13TG0"]]],[3,28,["_actualFontSize"],[0,["04+83OAbROHLNqjJ+13TG0"]]],[1,false,["_isBold"],-67],[1,false,["_active"],-68],[2,["_color"],[0,["69S+xHo7hPha7bZyvApu3H"]],[4,4294967295]],[3,28,["_fontSize"],[0,["69S+xHo7hPha7bZyvApu3H"]]],[2,["_contentSize"],[0,["e2RQgcSW9MLr16bpdsqz3a"]],[5,56,63]],[3,28,["_actualFontSize"],[0,["69S+xHo7hPha7bZyvApu3H"]]],[3,false,["_isBold"],[0,["69S+xHo7hPha7bZyvApu3H"]]],[1,"牌桌",["_string"],-69],[1,true,["_active"],-70],[3,0,["_left"],[0,["b4KTKbVAxAs7r2x0Fl0P/u"]]],[3,0,["_right"],[0,["b4KTKbVAxAs7r2x0Fl0P/u"]]],[5,["_anchorPoint"],-71,[0,0.5,0.5]],[5,["_lpos"],-72,[1,0,0,0]],[5,["_lpos"],-73,[1,0,0,0]],[36,["_spriteFrame"],[0,["fc5FUhB4xOcoVYVcWFtPgm"]],5],[2,["_contentSize"],[0,["b8Z6UJOCdKDY5dVMjeSXye"]],[5,140,72]],[2,["_contentSize"],[0,["80aevhB9JAZre1e7bhi/n3"]],[5,140,72]],[1,true,["_active"],-74],[1,1,["_cacheMode"],-75],[1,1,["_cacheMode"],-76],[1,262144,["_layer"],-77],[1,262144,["_layer"],-78],[1,262144,["_layer"],-79],[1,262144,["_layer"],-80],[3,262144,["_layer"],[0,["0ajU0uagdPxavuk0LJ09Tc"]]],[1,262144,["_layer"],-81],[3,262144,["_layer"],[0,["a7QfB6OP1MTIOAQnU75w8Q"]]]]],4]],[0,["371FXY599ELYAbsEca+UKq"]],[0,["d92cVt26NC0aYZBYr8V+oJ"]],[8,512,{},2,[9,"356G2DfwJKuoBXUMrD40Hj",null,null,-89,[10,"6fDT4XfkZCxJMROuLL6EfZ",1,[[1,"Btn",["_name"],4],[5,["_lpos"],4,[1,244.462,724,0]],[5,["_lrot"],4,[3,0,0,0,1]],[5,["_euler"],4,[1,0,0,0]],[1,"",["_string"],-83],[2,["_contentSize"],[0,["b24hYURW9KpocNIHK8nkus"]],[5,0,50.4]],[1,false,["_active"],-84],[11,["_spriteFrame"],-85,8],[2,["_contentSize"],[0,["6bl478mYtDHqn5INKDzzGm"]],[5,36,36]],[1,1,["_sizeMode"],-86],[2,["_contentSize"],[0,["43wr23XBhGA5OB92hvM+N+"]],[5,80,80]],[1,1,["_cacheMode"],-87],[1,262144,["_layer"],4],[3,262144,["_layer"],[0,["2cPrEqipRJv5RPiHgd76Yr"]]],[1,262144,["_layer"],-88]]],7]],[13,"Sprite",262144,9,[[7,-90,[4,"10hVjdIsZNeowYtTocg53i"],[5,126,33]],[33,-91,[4,"e5fR+/DWBOv4U7SPolK6Ec"],10]],[6,"fb6HxneUdMP5V65yi0fW4p",null,null,null,1,0]],[22,"Camera",262144,6,[-92],[6,"a8GvW0O7hIxqOOPKIfow6p",null,null,null,1,0]],[37,"Camera<CameraComponent>",0,844,0,33554432,18,[4,"52bWewtX1DtY08rhmCOB/L"],[4,0]],[0,["371FXY599ELYAbsEca+UKq"]],[0,["8d568+eGRD9KB04+mSeX9T"]],[0,["04+83OAbROHLNqjJ+13TG0"]],[0,["74T/Q68CBBKbtORhHUNPOj"]],[0,["69S+xHo7hPha7bZyvApu3H"]],[0,["d92cVt26NC0aYZBYr8V+oJ"]],[0,["12IUP93URCSKDa5dCGfbHi"]],[0,["fc5FUhB4xOcoVYVcWFtPgm"]],[0,["8d568+eGRD9KB04+mSeX9T"]],[0,["04OWTNCmlOXqXTZ63FwmQI"]],[0,["04+83OAbROHLNqjJ+13TG0"]],[0,["74T/Q68CBBKbtORhHUNPOj"]],[0,["69S+xHo7hPha7bZyvApu3H"]],[0,["12IUP93URCSKDa5dCGfbHi"]],[0,["15Bx38pbNFSbqR12K/5yIs"]],[0,["3e4IA8nDRGM66URoCtgXbG"]],[0,["dfhA+hpB9D86xlp6wJM560"]],[20,"Content",512,262144,2,[[7,-93,[4,"15MHzes3xIG4Ttehnq96Wp"],[5,630,606]]],[6,"d9eB/C76lCPIBB8BwB6r9I",null,null,null,1,0],[1,0,361,0]],[21,"Node-001",262144,2,[[23,-94,[4,"e3Pa3RUVJDk4sTLe236oLp"]]],[6,"1dck6NqKRGL7k1hzUQMUbM",null,null,null,1,0],[1,2.9189999999999827,-381.803,0]],[0,["15Bx38pbNFSbqR12K/5yIs"]],[0,["3e4IA8nDRGM66URoCtgXbG"]],[0,["dfhA+hpB9D86xlp6wJM560"]]],0,[0,-1,9,0,-2,16,0,-3,13,0,-4,11,0,2,1,0,1,1,0,1,1,0,1,1,0,-1,10,0,-2,6,0,-3,2,0,1,2,0,1,2,0,-1,7,0,-2,8,0,-3,16,0,-4,37,0,-5,38,0,-6,9,0,1,3,0,1,3,0,1,3,0,-1,11,0,-2,13,0,1,6,0,6,19,0,1,6,0,-1,18,0,1,7,0,1,7,0,1,7,0,1,8,0,1,8,0,0,39,0,0,40,0,0,41,0,0,41,0,0,39,0,0,40,0,-1,17,0,2,9,0,1,10,0,1,10,0,0,20,0,0,21,0,0,12,0,0,22,0,0,23,0,0,24,0,0,21,0,0,25,0,0,26,0,0,27,0,0,27,0,0,12,0,0,24,0,0,22,0,0,20,0,0,25,0,0,26,0,0,12,0,0,23,0,2,11,0,0,14,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,15,0,0,28,0,0,15,0,0,33,0,0,14,0,0,32,0,0,30,0,0,14,0,0,15,0,0,33,0,0,29,0,0,31,0,2,13,0,0,34,0,0,35,0,0,36,0,0,36,0,0,34,0,0,35,0,2,16,0,1,17,0,1,17,0,-1,19,0,1,37,0,1,38,0,7,1,3,8,8,94],[0,0,0,0,0,0,0,0,0,0,0,0],[9,5,3,4,3,4,5,3,4,3,5,4],[3,4,0,1,0,1,5,2,6,2,7,8]],[[[38,"../scripts/ui/hall/event/matchBgBlur/DualBlur",[{"hash":3076217512,"name":"../scripts/ui/hall/event/matchBgBlur/DualBlur|sprite-vs:Down|sprite-fs:Down","blocks":[{"name":"Properties","stageFlags":1,"binding":0,"members":[{"name":"resolution","type":14,"count":1},{"name":"offset","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"u_texture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Properties","stageFlags":1,"binding":0,"members":[{"name":"resolution","type":14,"count":1},{"name":"offset","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"u_texture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 v_uv0;\n#if USE_TEXTURE\n  out vec4 v_uv1;\n  out vec4 v_uv2;\n  out vec4 v_uv3;\n  out vec4 v_uv4;\n#endif\nlayout(std140) uniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Down () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    v_uv0 = cc_cameraPos.w > 1.0 ? vec2(v_uv0.x, 1.0 - v_uv0.y) : v_uv0;\n  #endif\n  #if USE_TEXTURE\n    vec2 texelSize = 0.5 / resolution;\n    v_uv1.xy = v_uv0 - texelSize * vec2(offset);\n    v_uv1.zw = v_uv0 + texelSize * vec2(offset);\n    v_uv2.xy = v_uv0 - vec2(texelSize.x, -texelSize.y) * vec2(offset);\n    v_uv2.zw = v_uv0 + vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Down(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  in vec4 v_uv1;\n  in vec4 v_uv2;\n  in vec4 v_uv3;\n  in vec4 v_uv4;\n  uniform sampler2D u_texture;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 Down () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);\n    o += texture(cc_spriteTexture, v_uv1.xy);\n    o += texture(cc_spriteTexture, v_uv1.zw);\n    o += texture(cc_spriteTexture, v_uv2.xy);\n    o += texture(cc_spriteTexture, v_uv2.zw);\n    o *= 0.2;\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = Down(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 v_uv0;\n#if USE_TEXTURE\n  varying vec4 v_uv1;\n  varying vec4 v_uv2;\n  varying vec4 v_uv3;\n  varying vec4 v_uv4;\n#endif\n   uniform vec2 resolution;\n   uniform float offset;\nvec4 Down () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    v_uv0 = cc_cameraPos.w > 1.0 ? vec2(v_uv0.x, 1.0 - v_uv0.y) : v_uv0;\n  #endif\n  #if USE_TEXTURE\n    vec2 texelSize = 0.5 / resolution;\n    v_uv1.xy = v_uv0 - texelSize * vec2(offset);\n    v_uv1.zw = v_uv0 + texelSize * vec2(offset);\n    v_uv2.xy = v_uv0 - vec2(texelSize.x, -texelSize.y) * vec2(offset);\n    v_uv2.zw = v_uv0 + vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Down(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  varying vec4 v_uv1;\n  varying vec4 v_uv2;\n  varying vec4 v_uv3;\n  varying vec4 v_uv4;\n  uniform sampler2D u_texture;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 Down () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);\n    o += texture2D(cc_spriteTexture, v_uv1.xy);\n    o += texture2D(cc_spriteTexture, v_uv1.zw);\n    o += texture2D(cc_spriteTexture, v_uv2.xy);\n    o += texture2D(cc_spriteTexture, v_uv2.zw);\n    o *= 0.2;\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = Down(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":58,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"}]},{"hash":1516232131,"name":"../scripts/ui/hall/event/matchBgBlur/DualBlur|sprite-vs:Up|sprite-fs:Up","blocks":[{"name":"Properties","stageFlags":1,"binding":0,"members":[{"name":"resolution","type":14,"count":1},{"name":"offset","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"u_texture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Properties","stageFlags":1,"binding":0,"members":[{"name":"resolution","type":14,"count":1},{"name":"offset","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"u_texture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 v_uv0;\n#if USE_TEXTURE\n  out vec4 v_uv1;\n  out vec4 v_uv2;\n  out vec4 v_uv3;\n  out vec4 v_uv4;\n#endif\nlayout(std140) uniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Up(){\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    v_uv0 = cc_cameraPos.w > 1.0 ? vec2(v_uv0.x, 1.0 - v_uv0.y) : v_uv0;\n  #endif\n  #if USE_TEXTURE\n    vec2 texelSize = 0.5 / resolution;\n    v_uv1.xy = v_uv0 + vec2(-texelSize.x * 2., 0) * offset;\n    v_uv1.zw = v_uv0 + vec2(-texelSize.x, texelSize.y) * offset;\n    v_uv2.xy = v_uv0 + vec2(0, texelSize.y * 2.) * offset;\n    v_uv2.zw = v_uv0 + texelSize * offset;\n    v_uv3.xy = v_uv0 + vec2(texelSize.x * 2., 0) * offset;\n    v_uv3.zw = v_uv0 + vec2(texelSize.x, -texelSize.y) * offset;\n    v_uv4.xy = v_uv0 + vec2(0, -texelSize.y * 2.) * offset;\n    v_uv4.zw = v_uv0 - texelSize * offset;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Up(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  in vec4 v_uv1;\n  in vec4 v_uv2;\n  in vec4 v_uv3;\n  in vec4 v_uv4;\n  uniform sampler2D u_texture;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 Up (){\n  vec4 sum = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    sum *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv1.xy);\n    sum += texture(cc_spriteTexture, v_uv1.zw) * 2.;\n    sum += texture(cc_spriteTexture, v_uv2.xy);\n    sum += texture(cc_spriteTexture, v_uv2.zw) * 2.;\n    sum += texture(cc_spriteTexture, v_uv3.xy);\n    sum += texture(cc_spriteTexture, v_uv3.zw) * 2.;\n    sum += texture(cc_spriteTexture, v_uv4.xy);\n    sum += texture(cc_spriteTexture, v_uv4.zw) * 2.;\n    sum *= 0.0833;\n  #endif\n  sum *= color;\n  ALPHA_TEST(sum);\n  return sum;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = Up(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 v_uv0;\n#if USE_TEXTURE\n  varying vec4 v_uv1;\n  varying vec4 v_uv2;\n  varying vec4 v_uv3;\n  varying vec4 v_uv4;\n#endif\n   uniform vec2 resolution;\n   uniform float offset;\nvec4 Up(){\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    v_uv0 = cc_cameraPos.w > 1.0 ? vec2(v_uv0.x, 1.0 - v_uv0.y) : v_uv0;\n  #endif\n  #if USE_TEXTURE\n    vec2 texelSize = 0.5 / resolution;\n    v_uv1.xy = v_uv0 + vec2(-texelSize.x * 2., 0) * offset;\n    v_uv1.zw = v_uv0 + vec2(-texelSize.x, texelSize.y) * offset;\n    v_uv2.xy = v_uv0 + vec2(0, texelSize.y * 2.) * offset;\n    v_uv2.zw = v_uv0 + texelSize * offset;\n    v_uv3.xy = v_uv0 + vec2(texelSize.x * 2., 0) * offset;\n    v_uv3.zw = v_uv0 + vec2(texelSize.x, -texelSize.y) * offset;\n    v_uv4.xy = v_uv0 + vec2(0, -texelSize.y * 2.) * offset;\n    v_uv4.zw = v_uv0 - texelSize * offset;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Up(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  varying vec4 v_uv1;\n  varying vec4 v_uv2;\n  varying vec4 v_uv3;\n  varying vec4 v_uv4;\n  uniform sampler2D u_texture;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 Up (){\n  vec4 sum = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    sum *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv1.xy);\n    sum += texture2D(cc_spriteTexture, v_uv1.zw) * 2.;\n    sum += texture2D(cc_spriteTexture, v_uv2.xy);\n    sum += texture2D(cc_spriteTexture, v_uv2.zw) * 2.;\n    sum += texture2D(cc_spriteTexture, v_uv3.xy);\n    sum += texture2D(cc_spriteTexture, v_uv3.zw) * 2.;\n    sum += texture2D(cc_spriteTexture, v_uv4.xy);\n    sum += texture2D(cc_spriteTexture, v_uv4.zw) * 2.;\n    sum *= 0.0833;\n  #endif\n  sum *= color;\n  ALPHA_TEST(sum);\n  return sum;\n}\nvoid main() { gl_FragColor = Up(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":58,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"}]}],[{"name":"Down","passes":[{"program":"../scripts/ui/hall/event/matchBgBlur/DualBlur|sprite-vs:Down|sprite-fs:Down","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"u_texture":{"value":"white","type":28},"resolution":{"type":14,"value":[780,1688]},"offset":{"type":13,"value":[7]},"alphaThreshold":{"type":13,"value":[0.5]}}}]},{"name":"Up","passes":[{"program":"../scripts/ui/hall/event/matchBgBlur/DualBlur|sprite-vs:Up|sprite-fs:Up","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"u_texture":{"value":"white","type":28},"resolution":{"type":14,"value":[780,1688]},"offset":{"type":13,"value":[7]},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]
