// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        u_dissolveMap: { value: white }
        dissolveThreshold: { value: 0.5, editor: { range:[0, 1, 0.001], slide: true, tooltip: '溶解阈值' } } # 此处定义的参数都必须指向 CCProgram 处对应声明的 uniform
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    uniform sampler2D u_dissolveMap;// 熔岩形状的纹理;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform Dissolve{
    float dissolveThreshold;// 熔岩阀值[0, 1];
  };



  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    // float value = 1.0;
    // float dissolveThreshold = 0.2;

    #if USE_TEXTURE
        // vec4 dissolveMap = texture(u_dissolveMap, uv0); // 如果颜色的 r 分量小于阀值，将这个着色操作丢弃;
        // value *= dissolveMap.a;
    #endif

    // if (value <= 0.0) {
    //   discard; // 将小于阈值的片段丢弃，形成溶解
    // }
    
    // o = vec4(1, 1, 1, value); // 溶解的边缘设置一个边缘过度色

    #if USE_TEXTURE
      // o *= texture(cc_spriteTexture, uv0); // 与原纹理混合;
      vec4 dissolveMap = texture(u_dissolveMap, uv0); // 如果颜色的 r 分量小于阀值，将这个着色操作丢弃;
      o = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      o.rgba*=dissolveMap.rgba;
    #endif

    // o *= color;
    // if (value < dissolveThreshold + 0.05) {
    //   o = vec4(0.9, 0.6, 0.3, o.a); // 溶解的边缘设置一个边缘过度色
    // }

    ALPHA_TEST(o);
    return o;
  }
}%
