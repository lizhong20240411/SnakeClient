// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

// https://www.bilibili.com/video/BV1Qz4y1p7CE/

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        inputColor: { editor: { type: color } }
        degree: { value: 0.01, editor: { range:[0, 1, 0.001], slide: true, tooltip: '变化程度' } } # 此处定义的参数都必须指向 CCProgram 处对应声明的 uniform
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  #pragma extension([GL_OES_standard_derivatives, __VERSION__ < 300])
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <common/common-define>

  #include <sdf/sdf_func>
  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform DistortionExtent{
    vec4 inputColor;
    float degree;
  };

  vec4 frag( )
  {
    vec2 uv = uv0.xy;
    float D = GetD(cc_spriteTexture, uv);
    // float w = mod(floor(cc_time.x), 8.) + 0.5;     // 边线粗度(单边)
    float w = 4.0;     // 边线粗度(单边)
    //fwidth 函数的作用是计算输入数据在屏幕空间中的变化率。它对每个像素（片元）计算输入数据在屏幕 x 和 y 方向上的变化量，并返回这两个变化量的绝对值之和。
    #if __VERSION__ < 300
      #ifdef GL_OES_standard_derivatives
        float aastep = fwidth(D);
      #else
        float aastep = 0.05;
      #endif
    #else
      float aastep = fwidth(D);
    #endif
    
    // aastep = 0.01;

    aastep = 0.7 * length(vec2(dFdx(D), dFdy(D)));   // 更加精确的AA，但是肉眼上和fwidth(D)已经很难区分出来
    // 1e-8 == 0.00000001
    aastep = max(aastep, 1e-8);   // never be 0, otherwise smoothstep result unexpectly

    float mask = smoothstep(aastep, -aastep, abs(D)-w);
    vec4 fragColor = vec4(0.1, 0.5, 0.9, mask);
    return fragColor;
  }
	
}%
