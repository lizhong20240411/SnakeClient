// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

// https://www.bilibili.com/video/BV1Qz4y1p7CE/

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        inputColor: { editor: { type: color } }
        degree: { value: 0.01, editor: { range:[0, 1, 0.001], slide: true, tooltip: '变化程度' } } # 此处定义的参数都必须指向 CCProgram 处对应声明的 uniform
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <common/common-define>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform DistortionExtent{
    vec4 inputColor;
    float degree;
  };

  float _Value = 0.5;
  float _EdgeWidth = 0.01;

  float sdCircle(vec2 p, float r )
  {
      // vec2 p1 = vec2(p.x-0.2, p.y+0.2);
      return length(p) - r;
  }

  float sdBox( in vec2 p, in vec2 b )
  {
      vec2 d = abs(p)-b;
      return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
  }

  vec4 sdfEdge(float sdf)
  {
      // 点在图形内
      float f1 = step(sdf,0.0);
      // 点在图形外
      float f2 = step(_EdgeWidth,sdf);
      // 点在图形上, _EdgeWidth 图形边缘宽度
      float f3 = step(0.0,sdf) * step(sdf,_EdgeWidth);
      
      return vec4(1,0.1,0.1,1) * f1
              + vec4(0.05,0.5,0.1,1) * f2
              + vec4(0.01,0.01,0.01,1) * f3;
  }

  vec4 frag () {
    vec2 p = uv0 - 0.5; // 将坐标原点移动到纹理中心

    // 圆形距离场
    float sdf1 = sdCircle(p,0.2);
    // 方形距离场
    float sdf2 = sdBox(p,vec2(0.1,0.15));
    float sdf = max(sdf1,-sdf2);
    // 两个距离场之间的变化
    // float sdf = lerp(sdf1,sdf2,degree);
    // float sdf = step(sdf1,0.01);
    vec4 o = sdfEdge(sdf);
    // #if USE_TEXTURE
    //     o *= CCSampleWithAlphaSeparated(cc_spriteTexture, p);
    // #endif

    // vec4 o = vec4(v,1.0,1.0,1.0);

    // ALPHA_TEST(o);
    return o;
  }
}%
