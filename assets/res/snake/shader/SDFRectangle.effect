// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

// https://www.bilibili.com/video/BV1Qz4y1p7CE/

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        inputColor: { editor: { type: color } }
        degree: { value: 0.01, editor: { range:[0, 1, 0.001], slide: true, tooltip: '变化程度' } } # 此处定义的参数都必须指向 CCProgram 处对应声明的 uniform
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <common/common-define>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform DistortionExtent{
    vec4 inputColor;
    float degree;
  };

  #define COLOR_WHITE vec3(1.0)
  #define COLOR_BLACK vec3(0.0)
  #define COLOR_MAGENDA vec3(1.0, 0.0, 1.0)

  #define BOX_RECT vec2(0.4, 0.4)
  #define BOX_COLOR1 vec3(0.2, 0.7, 0.9)
  #define BOX_COLOR2 vec3(0.9, 0.7, 0.2)

  float calculateBoxSDF(vec2 point, vec2 boxRect)
  {
    vec2 delta = abs(point) - boxRect;
    return length(max(delta, 0.0)) + min(max(delta.x,delta.y),0.0); 
  }

  vec4 frag( )
  {
      // Normalized pixel coordinates (from 0 to 1)
      vec2 fragCoord = uv0;
      vec2 iResolution = vec2(1.0,1.0);
      vec2 uv = (2.0 * fragCoord - iResolution.xy ) / iResolution.y;

      float distField = calculateBoxSDF(uv, BOX_RECT);
      
      vec3 finalColor = mix(COLOR_WHITE, BOX_COLOR2, sign(distField));
      finalColor *= 1.0 - exp(-2.0*abs(distField));;
      finalColor *= 0.8 + 0.2 * cos(150.0 * distField);
      finalColor = mix(finalColor, COLOR_WHITE, 1.0 - smoothstep(0.0, 0.02, abs(distField)));
      
      vec4 fragColor = vec4(finalColor, 1.0);
      fragColor *= color;
      return fragColor;
  }

}%
